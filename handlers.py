import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from database import save_user_data, get_user_data
from prompts import generate_content_plan, generate_post
from utils import create_monetization_keyboard, create_style_keyboard

logger = logging.getLogger(__name__)

# Conversation states
TOPIC, AUDIENCE, MONETIZATION, PRODUCT_DETAILS, PREFERENCES, STYLE, EMOTIONS, EXAMPLES = range(8)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and ask for channel topic."""
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='start_work')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å engaging –ø–æ—Å—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞.",
        reply_markup=reply_markup
    )
    return TOPIC

def button_handler(update: Update, context: CallbackContext) -> int:
    """Handle button clicks during conversation."""
    query = update.callback_query
    query.answer()

    if query.data == 'start_work':
        query.message.reply_text("–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞?")
        context.user_data['waiting_for'] = 'topic'
        return TOPIC

    if query.data in ['advertising', 'products', 'services', 'consulting']:
        context.user_data['monetization'] = query.data
        if query.data != 'advertising':
            query.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É/–∫—É—Ä—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
            context.user_data['waiting_for'] = 'product_details'
            return PRODUCT_DETAILS
        else:
            query.message.reply_text("–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?")
            context.user_data['waiting_for'] = 'preferences'
            return PREFERENCES

    if query.data in ['aggressive', 'business', 'humorous', 'custom']:
        context.user_data['style'] = query.data
        if query.data == 'custom':
            query.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å—Ç–∏–ª—å:")
            context.user_data['waiting_for'] = 'style'
            return STYLE
        query.message.reply_text("–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É –∞—É–¥–∏—Ç–æ—Ä–∏–∏?")
        context.user_data['waiting_for'] = 'emotions'
        return EMOTIONS

    # Default return if no other conditions are met
    return ConversationHandler.END

def text_handler(update: Update, context: CallbackContext) -> int:
    """Handle text input during conversation."""
    text = update.message.text

    if not hasattr(context, 'user_data'):
        context.user_data = {}

    # Handle different states
    if context.user_data.get('waiting_for') == 'topic':
        context.user_data['topic'] = text
        update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
        context.user_data['waiting_for'] = 'audience'
        return AUDIENCE

    elif context.user_data.get('waiting_for') == 'audience':
        context.user_data['audience'] = text
        keyboard = create_monetization_keyboard()
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MONETIZATION

    elif context.user_data.get('waiting_for') == 'product_details':
        context.user_data['product_details'] = text
        update.message.reply_text("–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?")
        context.user_data['waiting_for'] = 'preferences'
        return PREFERENCES

    elif context.user_data.get('waiting_for') == 'preferences':
        context.user_data['preferences'] = text
        keyboard = create_style_keyboard()
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return STYLE

    elif context.user_data.get('waiting_for') == 'emotions':
        context.user_data['emotions'] = text
        update.message.reply_text("–ü–µ—Ä–µ—à–ª–∏—Ç–µ 2-3 –ø—Ä–∏–º–µ—Ä–∞ –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è:")
        context.user_data['waiting_for'] = 'examples'
        return EXAMPLES

    elif context.user_data.get('waiting_for') == 'examples':
        context.user_data['examples'] = text
        # Generate sample post
        try:
            sample_post = generate_post(context.user_data)
            update.message.reply_text(
                "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n\n" + sample_post + "\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω..."
            )
            content_plan = generate_content_plan(context.user_data)
            context.user_data['content_plan'] = content_plan
            save_user_data(update.effective_chat.id, context.user_data)

            keyboard = [
                [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", callback_data='view_plan')],
                [InlineKeyboardButton("‚úç –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data='create_post')],
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", callback_data='new_plan')]
            ]
            update.message.reply_text(
                "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –≥–æ—Ç–æ–≤! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error generating content: {e}")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    # Default return if no other conditions are met
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel and end the conversation."""
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    return ConversationHandler.END