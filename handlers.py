import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from database import (
    save_user_preferences, get_user_preferences,
    save_scheduled_message, get_scheduled_messages, save_user_data, get_user_data
)
from prompts import generate_content_plan, generate_post, generate_product_repackaging
from utils import (
    create_monetization_keyboard, create_style_keyboard,
    create_subscription_keyboard, create_main_menu_keyboard,
    create_back_to_menu_keyboard, check_subscription
)

logger = logging.getLogger(__name__)

# Conversation states
(SUBSCRIPTION_CHECK, MAIN_MENU, TOPIC, AUDIENCE, MONETIZATION, PRODUCT_DETAILS, 
 PREFERENCES, STYLE, EMOTIONS, EXAMPLES, POST_NUMBER,
 REPACKAGE_AUDIENCE, REPACKAGE_TOOL, REPACKAGE_RESULT) = range(14)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and check subscription."""
    try:
        user_id = update.effective_user.id
        logger.info("============ NEW START HANDLER INVOKED ============")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Chat ID: {update.effective_chat.id}")
        logger.info("=======================================")

        # Clear any existing user data
        context.user_data.clear()
        logger.info("Cleared existing user data")

        # Check subscription status
        is_subscribed = check_subscription(context, user_id)
        logger.info(f"Subscription check result for user {user_id}: {is_subscribed}")

        if not is_subscribed:
            keyboard = create_subscription_keyboard()
            logger.info("Created subscription keyboard")
            update.message.reply_text(
                "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov",
                reply_markup=keyboard
            )
            return SUBSCRIPTION_CHECK

        # Show main menu with full description
        keyboard = create_main_menu_keyboard()
        logger.info(f"Created main menu keyboard with buttons: {[btn.text for row in keyboard.inline_keyboard for btn in row]}")
        menu_text = (
            "üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
            "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )

        logger.info("Sending menu message with text:")
        logger.info(menu_text)

        update.message.reply_text(menu_text, reply_markup=keyboard)
        logger.info("Successfully sent main menu message")

        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """Handle main menu selection."""
    query = update.callback_query
    query.answer()

    try:
        if query.data == 'content_plan':
            query.message.reply_text(
                "üìù –ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞?\n\n"
                "–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –±–∏–∑–Ω–µ—Å, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç.–¥."
            )
            context.user_data['waiting_for'] = 'topic'
            return TOPIC

        elif query.data == 'repackage':
            query.message.reply_text(
                "üë• –ö—Ç–æ —Ç–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –∏ –±–ª–æ–≥–≥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É"
            )
            context.user_data['waiting_for'] = 'repackage_audience'
            return REPACKAGE_AUDIENCE

        elif query.data == 'start_over':
            context.user_data.clear()
            query.message.reply_text(
                "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_main_menu_keyboard()
            )
            return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in main menu handler: {e}", exc_info=True)
        query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def handle_repackage_audience(update: Update, context: CallbackContext) -> int:
    """Handle product repackaging audience input."""
    try:
        context.user_data['repackage_audience'] = update.message.text
        update.message.reply_text(
            "üõ†Ô∏è –ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç—ã –¥–∞–µ—à—å?\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ —Å–Ω—è—Ç—å —Ä–∏–ª—Å –Ω–∞ 1 –º–ª–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            reply_markup=create_back_to_menu_keyboard()
        )
        return REPACKAGE_TOOL
    except Exception as e:
        logger.error(f"Error in repackage audience handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def handle_repackage_tool(update: Update, context: CallbackContext) -> int:
    """Handle product repackaging tool input."""
    try:
        context.user_data['repackage_tool'] = update.message.text
        update.message.reply_text(
            "üéØ –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–∏ –ø–æ–ª—É—á–∞—Ç?\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∏–ª—Å —Å 1 –º–ª–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø—Ä–æ–¥–∞–∂–∏",
            reply_markup=create_back_to_menu_keyboard()
        )
        return REPACKAGE_RESULT
    except Exception as e:
        logger.error(f"Error in repackage tool handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def handle_repackage_result(update: Update, context: CallbackContext) -> int:
    """Generate product repackaging content."""
    try:
        context.user_data['repackage_result'] = update.message.text

        # Generate repackaging content
        repackaging_data = {
            'audience': context.user_data['repackage_audience'],
            'tool': context.user_data['repackage_tool'],
            'result': context.user_data['repackage_result']
        }

        update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞...")

        content = generate_product_repackaging(repackaging_data)

        # Send the generated content
        update.message.reply_text(
            f"{content}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in repackage result handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def button_handler(update: Update, context: CallbackContext) -> int:
    """Handle button callbacks."""
    query = update.callback_query
    query.answer()

    logger.info("============ BUTTON PRESSED ============")
    logger.info(f"Button data: {query.data}")
    logger.info(f"Current state: {context.user_data.get('waiting_for')}")
    logger.info(f"User data keys: {list(context.user_data.keys())}")
    logger.info("=======================================")

    try:
        # Handle subscription check
        if query.data == 'check_subscription':
            is_subscribed = check_subscription(context, update.effective_user.id)
            if is_subscribed:
                # Show main menu
                keyboard = create_main_menu_keyboard()
                menu_text = (
                    "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                    "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                    "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
                )
                query.message.reply_text(
                    f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n{menu_text}",
                    reply_markup=keyboard
                )
                return MAIN_MENU
            else:
                query.message.reply_text(
                    "‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=create_subscription_keyboard()
                )
                return SUBSCRIPTION_CHECK

        elif query.data == 'back_to_menu':
            keyboard = create_main_menu_keyboard()
            menu_text = (
                "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            )
            query.message.reply_text(
                f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n{menu_text}",
                reply_markup=keyboard
            )
            return MAIN_MENU

        return MAIN_MENU #This line added to ensure consistent return to MAIN_MENU for all other buttons

    except Exception as e:
        logger.error(f"Error in button_handler: {e}", exc_info=True)
        query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def handle_example_post(update: Update, context: CallbackContext) -> int:
    """Handle incoming example posts and show action buttons."""
    try:
        logger.info("============ HANDLING EXAMPLE POST ============")

        # Extract text from either forwarded or regular message
        if update.message.forward_from_chat:
            # This is a forwarded message from a channel
            text = update.message.text or update.message.caption or ''
            source = f"(–ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ {update.message.forward_from_chat.title})"
            logger.info(f"Received forwarded post from channel: {update.message.forward_from_chat.title}")
        else:
            # Regular text message
            text = update.message.text
            source = ""
            logger.info("Received direct text message")

        logger.info(f"Post content: {text[:50]}...")  # Log first 50 chars

        # Initialize examples list if it doesn't exist
        if 'examples' not in context.user_data:
            context.user_data['examples'] = []
            logger.info("Initialized examples list")

        # Add the new example with source information
        example = {'text': text, 'source': source}
        context.user_data['examples'].append(example)
        example_count = len(context.user_data['examples'])
        logger.info(f"Added example post #{example_count}")

        # Create keyboard with buttons
        keyboard = [[
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ—Å—Ç", callback_data='add_example'),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='finish_examples')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send response with buttons
        update.message.reply_text(
            f"üëç –û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å—Ç #{example_count} {source} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        logger.info("Sent response with action buttons")
        return EXAMPLES

    except Exception as e:
        logger.error(f"Error handling example post: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return EXAMPLES

def text_handler(update: Update, context: CallbackContext) -> int:
    """Handle text input during conversation."""
    try:
        text = update.message.text
        logger.info("============ TEXT RECEIVED ============")
        logger.info(f"Text: {text}")
        logger.info(f"Current state: {context.user_data.get('waiting_for')}")
        logger.info(f"User data keys: {list(context.user_data.keys())}")
        logger.info("======================================")

        if context.user_data.get('waiting_for') == 'examples':
            return handle_example_post(update, context)

        elif context.user_data.get('waiting_for') == 'topic':
            logger.info("Processing topic input")
            context.user_data['topic'] = text
            update.message.reply_text(
                "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–µ—à–∞–µ—Ç–µ"
            )
            context.user_data['waiting_for'] = 'audience'
            logger.info("Topic saved, moving to audience input")
            return AUDIENCE

        elif context.user_data.get('waiting_for') == 'audience':
            logger.info("Processing audience input")
            context.user_data['audience'] = text
            keyboard = create_monetization_keyboard()
            update.message.reply_text(
                "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            logger.info("Audience saved, moving to monetization selection")
            return MONETIZATION

        elif context.user_data.get('waiting_for') == 'product_details':
            logger.info("Processing product details input")
            context.user_data['product_details'] = text
            update.message.reply_text(
                "üéØ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –û—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–∞—á–∏\n"
                "‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã\n"
                "‚Ä¢ –¢–∞–±—É –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
            )
            context.user_data['waiting_for'] = 'preferences'
            logger.info("Product details saved, moving to preferences input")
            return PREFERENCES

        elif context.user_data.get('waiting_for') == 'preferences':
            logger.info("Processing preferences input")
            context.user_data['preferences'] = text
            keyboard = create_style_keyboard()
            update.message.reply_text(
                "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤:",
                reply_markup=keyboard
            )
            logger.info("Preferences saved, moving to style selection")
            return STYLE

        elif context.user_data.get('waiting_for') == 'custom_style':
            logger.info("Processing custom style input")
            context.user_data['style'] = text
            update.message.reply_text(
                "üé≠ –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É –∞—É–¥–∏—Ç–æ—Ä–∏–∏?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –î–æ–≤–µ—Ä–∏–µ\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å\n"
                "‚Ä¢ –ñ–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
            )
            context.user_data['waiting_for'] = 'emotions'
            logger.info("Custom style saved, moving to emotions input")
            return EMOTIONS

        elif context.user_data.get('waiting_for') == 'emotions':
            logger.info("============ PROCESSING EMOTIONS ============")
            logger.info(f"Received emotions text: {text}")
            logger.info(f"Current user data: {context.user_data}")

            try:
                # First send confirmation
                update.message.reply_text("‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏")
                logger.info("Sent confirmation message")

                # Save emotions
                context.user_data['emotions'] = text
                logger.info(f"Saved emotions: {text}")

                # Send transition message
                transition_message = (
                    "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è.\n\n"
                    "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä\n"
                    "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤\n\n"
                    "–ü—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä:"
                )
                update.message.reply_text(transition_message)
                logger.info("Sent transition message")

                # Update state
                context.user_data['waiting_for'] = 'examples'
                context.user_data['examples'] = []
                logger.info("Updated state to examples")

                return EXAMPLES

            except Exception as e:
                logger.error("============ ERROR IN EMOTIONS HANDLER ============")
                logger.error(f"Error details: {str(e)}")
                logger.error(f"Current state: {context.user_data.get('waiting_for')}")
                logger.error(f"User data: {context.user_data}")
                logger.error("Stack trace:", exc_info=True)
                logger.error("===============================================")

                try:
                    update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ—Ü–∏–∏ –µ—â–µ —Ä–∞–∑:"
                    )
                    return EMOTIONS
                except:
                    logger.error("Failed to send error message", exc_info=True)
                    return ConversationHandler.END

        elif context.user_data.get('waiting_for') == 'post_number':
            try:
                logger.info("============ PROCESSING POST NUMBER ============")
                logger.info(f"Received text: {text}")
                logger.info(f"Current user data: {context.user_data}")

                post_number = int(text)
                if 1 <= post_number <= 14:
                    update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —á–∏—Å–ª–æ {post_number}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
                    user_data = get_user_data(update.effective_chat.id)

                    logger.info(f"Retrieved user data from database: {list(user_data.keys())}")

                    if not user_data or 'content_plan' not in user_data:
                        logger.error("Content plan not found in user data")
                        update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                        )
                        return ConversationHandler.END

                    try:
                        generated_post = generate_post(user_data, post_number)
                        logger.info(f"Successfully generated post #{post_number}")

                        update.message.reply_text(
                            f"‚ú® –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à –ø–æ—Å—Ç #{post_number}:\n\n{generated_post}\n\n"
                            "–ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä (1-14):",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", 
                                                   callback_data='new_plan')
                            ]])
                        )
                        return POST_NUMBER
                    except Exception as e:
                        logger.error(f"Error generating post: {e}", exc_info=True)
                        update.message.reply_text(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        )
                        return POST_NUMBER
                else:
                    update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 14.")
                    return POST_NUMBER
            except ValueError:
                update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 14)."
                )
                return POST_NUMBER
            except Exception as e:
                logger.error(f"Unexpected error in post number handler: {e}", exc_info=True)
                update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return ConversationHandler.END

        elif context.user_data.get('waiting_for') == 'repackage_audience':
            return handle_repackage_audience(update, context)
        elif context.user_data.get('waiting_for') == 'repackage_tool':
            return handle_repackage_tool(update, context)
        elif context.user_data.get('waiting_for') == 'repackage_result':
            return handle_repackage_result(update, context)

        logger.warning(f"Unexpected waiting_for state: {context.user_data.get('waiting_for')}")
        return ConversationHandler.END

    except Exception as e:
        logger.error("========== ERROR IN TEXT HANDLER ==========")
        logger.error(f"Error details: {str(e)}")
        logger.error(f"Current state: {context.user_data.get('waiting_for')}")
        logger.error(f"Available user data keys: {list(context.user_data.keys())}")
        logger.error("Full error details:", exc_info=True)
        logger.error("=========================================")

        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel and end the conversation."""
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    return ConversationHandler.END