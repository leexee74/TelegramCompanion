import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from utils import create_main_menu_keyboard, create_subscription_keyboard, check_subscription

logger = logging.getLogger(__name__)

# Conversation states
(SUBSCRIPTION_CHECK, MAIN_MENU) = range(2)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and check subscription."""
    try:
        user_id = update.effective_user.id
        logger.info("============ NEW START COMMAND RECEIVED ============")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Chat ID: {update.effective_chat.id}")
        logger.info("=================================================")

        # Clear any existing user data
        context.user_data.clear()
        logger.info("Cleared existing user data")

        # Check subscription status
        is_subscribed = check_subscription(context, user_id)
        logger.info(f"Subscription check result: {is_subscribed}")

        if not is_subscribed:
            keyboard = create_subscription_keyboard()
            logger.info("Sending subscription request message")
            update.message.reply_text(
                "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov",
                reply_markup=keyboard
            )
            return SUBSCRIPTION_CHECK

        # Show main menu with full description
        keyboard = create_main_menu_keyboard()
        logger.info("Creating main menu keyboard")

        menu_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:\n\n"
            "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
            "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )

        logger.info("Sending main menu message")
        update.message.reply_text(menu_text, reply_markup=keyboard)
        logger.info("Start command completed successfully")

        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """Handle main menu button clicks."""
    try:
        query = update.callback_query
        query.answer()

        logger.info("============ MAIN MENU HANDLER ============")
        logger.info(f"Button pressed: {query.data}")
        logger.info("==========================================")

        if query.data == 'content_plan':
            # Reset conversation for content plan
            context.user_data.clear()
            query.message.edit_text(
                "‚ö° –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=create_main_menu_keyboard()
            )
            return MAIN_MENU

        elif query.data == 'repackage':
            # Reset conversation for repackaging
            context.user_data.clear()
            query.message.edit_text(
                "‚ö° –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=create_main_menu_keyboard()
            )
            return MAIN_MENU

        elif query.data == 'start_over':
            # Reset all user data
            context.user_data.clear()
            query.message.edit_text(
                "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                reply_markup=create_main_menu_keyboard()
            )
            return MAIN_MENU

        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in main menu handler: {e}", exc_info=True)
        update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def button_handler(update: Update, context: CallbackContext) -> int:
    """Handle button callbacks."""
    try:
        query = update.callback_query
        query.answer()

        logger.info("============ BUTTON HANDLER ============")
        logger.info(f"Button data: {query.data}")
        logger.info("======================================")

        # Handle subscription check
        if query.data == 'check_subscription':
            is_subscribed = check_subscription(context, update.effective_user.id)
            if is_subscribed:
                menu_text = (
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:\n\n"
                    "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                    "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                    "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
                )
                query.message.edit_text(
                    menu_text,
                    reply_markup=create_main_menu_keyboard()
                )
                return MAIN_MENU
            else:
                query.message.edit_text(
                    "‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=create_subscription_keyboard()
                )
                return SUBSCRIPTION_CHECK

        # For all other buttons, use the main menu handler
        return handle_main_menu(update, context)

    except Exception as e:
        logger.error(f"Error in button handler: {e}", exc_info=True)
        update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel and end the conversation."""
    logger.info(f"User {update.effective_user.id} cancelled the conversation")
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    return ConversationHandler.END