import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from utils import create_main_menu_keyboard, create_subscription_keyboard, check_subscription, create_back_to_menu_keyboard, create_audience_examples_keyboard, create_monetization_examples_keyboard, create_topic_examples_keyboard
from prompts import generate_product_repackaging, generate_content_plan
from database import save_user_data, get_user_data

logger = logging.getLogger(__name__)

# Conversation states
(SUBSCRIPTION_CHECK, MAIN_MENU, 
 REPACKAGE_AUDIENCE, REPACKAGE_TOOL, REPACKAGE_RESULT,
 CONTENT_TOPIC, CONTENT_AUDIENCE, CONTENT_MONETIZATION,
 CONTENT_PRODUCT, CONTENT_PREFERENCES, CONTENT_STYLE,
 CONTENT_EMOTIONS, CONTENT_EXAMPLES) = range(13)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and check subscription."""
    try:
        user_id = update.effective_user.id
        logger.info("============ NEW START COMMAND RECEIVED ============")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Chat ID: {update.effective_chat.id}")
        logger.info("=================================================")

        # Clear any existing user data
        context.user_data.clear()
        logger.info("Cleared existing user data")

        # Check subscription status
        is_subscribed = check_subscription(context, user_id)
        logger.info(f"Subscription check result: {is_subscribed}")

        if not is_subscribed:
            keyboard = create_subscription_keyboard()
            logger.info("Sending subscription request message")
            update.message.reply_text(
                "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov",
                reply_markup=keyboard
            )
            return SUBSCRIPTION_CHECK

        # Show main menu with full description
        keyboard = create_main_menu_keyboard()
        logger.info("Creating main menu keyboard")

        menu_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:\n\n"
            "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
            "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )

        logger.info("Sending main menu message")
        update.message.reply_text(menu_text, reply_markup=keyboard)
        logger.info("Start command completed successfully")

        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """Handle main menu button clicks."""
    try:
        query = update.callback_query
        query.answer()

        logger.info("============ MAIN MENU HANDLER ============")
        logger.info(f"User ID: {update.effective_user.id}")
        logger.info(f"Button pressed: {query.data}")
        logger.info("==========================================")

        if query.data == 'content_plan':
            # Start content plan flow
            context.user_data.clear()
            logger.info("Starting content plan flow")
            query.message.edit_text(
                "üìã –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é:",
                reply_markup=create_topic_examples_keyboard()
            )
            return CONTENT_TOPIC

        elif query.data == 'repackage':
            # Start repackaging flow
            context.user_data.clear()
            query.message.edit_text(
                "üéØ –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ—É–ø–∞–∫—É–µ–º –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞, —Å–∫–∞–∂–∏—Ç–µ:\n"
                "–ö—Ç–æ –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?",
                reply_markup=create_back_to_menu_keyboard()
            )
            return REPACKAGE_AUDIENCE

        elif query.data == 'start_over':
            # Reset all user data
            context.user_data.clear()
            query.message.edit_text(
                "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                reply_markup=create_main_menu_keyboard()
            )
            return MAIN_MENU

        elif query.data == 'back_to_menu':
            context.user_data.clear()
            query.message.edit_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:\n\n"
                "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                reply_markup=create_main_menu_keyboard()
            )
            return MAIN_MENU

        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in main menu handler: {e}", exc_info=True)
        update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def handle_content_topic(update: Update, context: CallbackContext) -> int:
    """Handle topic input for content plan."""
    try:
        # If it's a callback query, handle example selection
        if update.callback_query:
            query = update.callback_query
            query.answer()

            if query.data.startswith('topic_'):
                example_topics = {
                    'topic_business': '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
                    'topic_marketing': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö',
                    'topic_growth': '–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
                    'topic_art': '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'
                }
                selected_topic = example_topics.get(query.data)
                context.user_data['topic'] = selected_topic
                query.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {selected_topic}\n\n"
                    "üë• –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
                    reply_markup=create_audience_examples_keyboard()
                )
                return CONTENT_AUDIENCE

            elif query.data == 'back_to_menu':
                return handle_main_menu(update, context)

        # If it's a text message, save the topic
        else:
            # Log incoming message
            logger.info(f"============ CONTENT TOPIC HANDLER ============")
            logger.info(f"User ID: {update.effective_user.id}")
            logger.info(f"Message text: {update.message.text}")
            logger.info("=============================================")

            # Save topic info
            context.user_data['topic'] = update.message.text
            logger.info(f"Saved topic info: {update.message.text}")

            # Show audience examples
            update.message.reply_text(
                "üë• –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=create_audience_examples_keyboard()
            )
            return CONTENT_AUDIENCE

    except Exception as e:
        logger.error(f"Error in content topic handler: {e}", exc_info=True)
        if update.callback_query:
            update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_menu_keyboard()
            )
        else:
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_menu_keyboard()
            )
        return MAIN_MENU

def handle_content_audience(update: Update, context: CallbackContext) -> int:
    """Handle audience input for content plan."""
    try:
        # Handle example selection via callback
        if update.callback_query:
            query = update.callback_query
            query.answer()

            if query.data.startswith('audience_'):
                example_audiences = {
                    'audience_entrepreneurs': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏, –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
                    'audience_freelancers': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
                    'audience_bloggers': '–ë–ª–æ–≥–µ—Ä—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä—ã',
                    'audience_beginners': '–ù–∞—á–∏–Ω–∞—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –∂–µ–ª–∞—é—â–∏–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è'
                }
                selected_audience = example_audiences.get(query.data)
                context.user_data['audience'] = selected_audience
                query.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {selected_audience}\n\n"
                    "üí∞ –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª?\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                    reply_markup=create_monetization_examples_keyboard()
                )
                return CONTENT_MONETIZATION

            elif query.data == 'back_to_menu':
                return handle_main_menu(update, context)

        # Handle text input
        else:
            # Log incoming message
            logger.info(f"============ CONTENT AUDIENCE HANDLER ============")
            logger.info(f"User ID: {update.effective_user.id}")
            logger.info(f"Message text: {update.message.text}")
            logger.info("===============================================")

            # Save audience info
            context.user_data['audience'] = update.message.text
            logger.info(f"Saved audience info: {update.message.text}")

            # Show monetization examples
            update.message.reply_text(
                "üí∞ –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª?\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=create_monetization_examples_keyboard()
            )
            return CONTENT_MONETIZATION

    except Exception as e:
        logger.error(f"Error in content audience handler: {e}", exc_info=True)
        if update.callback_query:
            update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_menu_keyboard()
            )
        else:
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_menu_keyboard()
            )
        return MAIN_MENU

def handle_content_monetization(update: Update, context: CallbackContext) -> int:
    """Handle monetization input for content plan."""
    try:
        # Handle example selection via callback
        if update.callback_query:
            query = update.callback_query
            query.answer()

            if query.data.startswith('monetization_'):
                example_monetization = {
                    'monetization_info': '–ü—Ä–æ–¥–∞–∂–∞ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤ –∏ –∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç–æ–≤',
                    'monetization_consult': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –∫–æ—É—á–∏–Ω–≥',
                    'monetization_ads': '–†–µ–∫–ª–∞–º–∞ –∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                    'monetization_partner': '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ'
                }
                selected_monetization = example_monetization.get(query.data)
                context.user_data['monetization'] = selected_monetization
                query.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏: {selected_monetization}\n\n"
                    "üì¶ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É/–∫—É—Ä—Å:",
                    reply_markup=create_back_to_menu_keyboard()
                )
                return CONTENT_PRODUCT

            elif query.data == 'back_to_menu':
                return handle_main_menu(update, context)

        # Handle text input
        else:
            # Log incoming message
            logger.info(f"============ CONTENT MONETIZATION HANDLER ============")
            logger.info(f"User ID: {update.effective_user.id}")
            logger.info(f"Message text: {update.message.text}")
            logger.info("=================================================")

            # Save monetization info
            context.user_data['monetization'] = update.message.text
            logger.info(f"Saved monetization info: {update.message.text}")

            # Ask for product details
            update.message.reply_text(
                "üì¶ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É/–∫—É—Ä—Å:",
                reply_markup=create_back_to_menu_keyboard()
            )
            return CONTENT_PRODUCT

    except Exception as e:
        logger.error(f"Error in content monetization handler: {e}", exc_info=True)
        if update.callback_query:
            update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_menu_keyboard()
            )
        else:
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_menu_keyboard()
            )
        return MAIN_MENU

def handle_content_product(update: Update, context: CallbackContext) -> int:
    """Handle product details input for content plan."""
    try:
        # Log incoming message
        logger.info(f"============ CONTENT PRODUCT HANDLER ============")
        logger.info(f"User ID: {update.effective_user.id}")
        logger.info(f"Message text: {update.message.text}")
        logger.info("=============================================")

        # Save product details
        context.user_data['product_details'] = update.message.text
        logger.info(f"Saved product details: {update.message.text}")

        # Generate content plan
        update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω...")

        # Log before generating content plan
        logger.info("Generating content plan with data:")
        logger.info(context.user_data)

        content_plan = generate_content_plan(context.user_data)

        # Log after generating content plan
        logger.info("Content plan generated successfully")

        # Save content plan to database
        user_id = update.effective_user.id
        save_user_data(user_id, context.user_data)
        logger.info(f"Saved user data to database for user {user_id}")

        # Send the result and return to main menu
        update.message.reply_text(
            f"{content_plan}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in content product handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

def handle_repackage_audience(update: Update, context: CallbackContext) -> int:
    """Handle audience input for product repackaging."""
    try:
        # Save audience info
        context.user_data['audience'] = update.message.text
        logger.info(f"Saved audience info: {update.message.text}")

        # Ask for tool info
        update.message.reply_text(
            "üëç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ:\n"
            "–ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?",
            reply_markup=create_back_to_menu_keyboard()
        )
        return REPACKAGE_TOOL

    except Exception as e:
        logger.error(f"Error in repackage audience handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

def handle_repackage_tool(update: Update, context: CallbackContext) -> int:
    """Handle tool info for product repackaging."""
    try:
        # Save tool info
        context.user_data['tool'] = update.message.text
        logger.info(f"Saved tool info: {update.message.text}")

        # Ask for result info
        update.message.reply_text(
            "üí´ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:\n"
            "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–∏—Ç –≤–∞—à–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è?",
            reply_markup=create_back_to_menu_keyboard()
        )
        return REPACKAGE_RESULT

    except Exception as e:
        logger.error(f"Error in repackage tool handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

def handle_repackage_result(update: Update, context: CallbackContext) -> int:
    """Handle result info and generate repackaged content."""
    try:
        # Save result info
        context.user_data['result'] = update.message.text
        logger.info(f"Saved result info: {update.message.text}")

        # Generate repackaged content
        update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞...")
        repackaged_content = generate_product_repackaging(context.user_data)

        # Send the result and return to main menu
        update.message.reply_text(
            f"{repackaged_content}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

    except Exception as e:
        logger.error(f"Error in repackage result handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU

def button_handler(update: Update, context: CallbackContext) -> int:
    """Handle button callbacks."""
    try:
        query = update.callback_query
        query.answer()

        logger.info("============ BUTTON HANDLER ============")
        logger.info(f"Button data: {query.data}")
        logger.info("======================================")

        # Handle subscription check
        if query.data == 'check_subscription':
            is_subscribed = check_subscription(context, update.effective_user.id)
            if is_subscribed:
                menu_text = (
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:\n\n"
                    "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞\n"
                    "üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è\n"
                    "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
                )
                query.message.edit_text(
                    menu_text,
                    reply_markup=create_main_menu_keyboard()
                )
                return MAIN_MENU
            else:
                query.message.edit_text(
                    "‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=create_subscription_keyboard()
                )
                return SUBSCRIPTION_CHECK

        # For all other buttons, use the main menu handler
        return handle_main_menu(update, context)

    except Exception as e:
        logger.error(f"Error in button handler: {e}", exc_info=True)
        update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel and end the conversation."""
    logger.info(f"User {update.effective_user.id} cancelled the conversation")
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    return ConversationHandler.END