import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from database import save_user_data, get_user_data
from prompts import generate_content_plan, generate_post
from utils import (
    create_monetization_keyboard, create_style_keyboard,
    create_subscription_keyboard, check_subscription
)

logger = logging.getLogger(__name__)

# Conversation states
(SUBSCRIPTION_CHECK, TOPIC, AUDIENCE, MONETIZATION, PRODUCT_DETAILS, 
 PREFERENCES, STYLE, EMOTIONS, EXAMPLES, POST_NUMBER) = range(10)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and check subscription."""
    try:
        user_id = update.effective_user.id
        logger.info(f"============ START COMMAND ============")
        logger.info(f"User ID: {user_id}")
        logger.info(f"Chat ID: {update.effective_chat.id}")
        logger.info("=======================================")

        # Check subscription status
        is_subscribed = check_subscription(context, user_id)
        logger.info(f"Subscription check result for user {user_id}: {is_subscribed}")

        if not is_subscribed:
            reply_markup = create_subscription_keyboard()
            update.message.reply_text(
                "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov",
                reply_markup=reply_markup
            )
            return SUBSCRIPTION_CHECK

        # Initialize conversation
        keyboard = [[InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='start_work')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å engaging –ø–æ—Å—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=reply_markup
        )
        # Clear any existing user data
        context.user_data.clear()
        logger.info("User data cleared, waiting for start_work button press")
        return TOPIC

    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

def button_handler(update: Update, context: CallbackContext) -> int:
    """Handle button callbacks."""
    query = update.callback_query
    query.answer()

    logger.info("============ BUTTON PRESSED ============")
    logger.info(f"Button data: {query.data}")
    logger.info(f"Current state: {context.user_data.get('waiting_for')}")
    logger.info(f"User data: {context.user_data}")
    logger.info("=======================================")

    try:
        if query.data == 'check_subscription':
            is_subscribed = check_subscription(context, update.effective_user.id)
            if is_subscribed:
                keyboard = [[InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='start_work')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.message.reply_text(
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=reply_markup
                )
                return TOPIC
            else:
                query.message.reply_text(
                    "‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @expert_buyanov\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=create_subscription_keyboard()
                )
                return SUBSCRIPTION_CHECK

        elif query.data == 'start_work':
            query.message.reply_text(
                "üìù –ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞?\n\n"
                "–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –±–∏–∑–Ω–µ—Å, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç.–¥.\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã:"
            )
            context.user_data['waiting_for'] = 'topic'
            logger.info("Requested channel topic")
            return TOPIC

        elif query.data in ['advertising', 'products', 'services', 'consulting']:
            context.user_data['monetization'] = query.data
            if query.data != 'advertising':
                query.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É/–∫—É—Ä—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                context.user_data['waiting_for'] = 'product_details'
                return PRODUCT_DETAILS
            else:
                query.message.reply_text(
                    "üéØ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ –û—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–∞—á–∏\n"
                    "‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã\n"
                    "‚Ä¢ –¢–∞–±—É –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
                )
                context.user_data['waiting_for'] = 'preferences'
                return PREFERENCES

        elif query.data in ['aggressive', 'business', 'humorous', 'custom']:
            context.user_data['style'] = query.data
            if query.data == 'custom':
                query.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å—Ç–∏–ª—å:")
                context.user_data['waiting_for'] = 'custom_style'
                return STYLE

            query.message.reply_text(
                "üé≠ –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É –∞—É–¥–∏—Ç–æ—Ä–∏–∏?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –î–æ–≤–µ—Ä–∏–µ\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å\n"
                "‚Ä¢ –ñ–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
            )
            context.user_data['waiting_for'] = 'emotions'
            return EMOTIONS

        elif query.data == 'add_example':
            logger.info("User requested to add another example")
            query.message.reply_text("üìù –•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.")
            return EXAMPLES

        elif query.data == 'finish_examples':
            logger.info("User requested to finish adding examples")
            if len(context.user_data.get('examples', [])) < 1:
                query.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞."
                )
                return EXAMPLES

            return process_examples(update, context)

        elif query.data == 'new_plan':
            query.message.reply_text("–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞?")
            context.user_data.clear()
            context.user_data['waiting_for'] = 'topic'
            return TOPIC

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in button_handler: {e}", exc_info=True)
        query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def handle_example_post(update: Update, context: CallbackContext) -> int:
    """Handle incoming example posts and show action buttons."""
    try:
        text = update.message.text
        logger.info("============ HANDLING EXAMPLE POST ============")
        logger.info(f"Received example post: {text[:50]}...")  # Log first 50 chars

        # Initialize examples list if it doesn't exist
        if 'examples' not in context.user_data:
            context.user_data['examples'] = []
            logger.info("Initialized examples list")

        # Add the new example
        context.user_data['examples'].append(text)
        example_count = len(context.user_data['examples'])
        logger.info(f"Added example post #{example_count}")

        # Create keyboard with buttons
        keyboard = [[
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ—Å—Ç", callback_data='add_example'),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='finish_examples')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send response with buttons
        update.message.reply_text(
            f"üëç –û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å—Ç #{example_count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        logger.info("Sent response with action buttons")
        return EXAMPLES

    except Exception as e:
        logger.error(f"Error handling example post: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return EXAMPLES

def text_handler(update: Update, context: CallbackContext) -> int:
    """Handle text input during conversation."""
    try:
        text = update.message.text
        logger.info("============ TEXT RECEIVED ============")
        logger.info(f"Text: {text}")
        logger.info(f"Waiting for: {context.user_data.get('waiting_for')}")
        logger.info(f"Full user data: {context.user_data}")
        logger.info("======================================")

        if context.user_data.get('waiting_for') == 'examples':
            return handle_example_post(update, context)

        elif context.user_data.get('waiting_for') == 'topic':
            logger.info("Processing topic input")
            context.user_data['topic'] = text
            update.message.reply_text(
                "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–µ—à–∞–µ—Ç–µ"
            )
            context.user_data['waiting_for'] = 'audience'
            logger.info("Topic saved, moving to audience input")
            return AUDIENCE

        elif context.user_data.get('waiting_for') == 'audience':
            context.user_data['audience'] = text
            keyboard = create_monetization_keyboard()
            update.message.reply_text(
                "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            return MONETIZATION

        elif context.user_data.get('waiting_for') == 'product_details':
            context.user_data['product_details'] = text
            update.message.reply_text(
                "üéØ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –û—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–∞—á–∏\n"
                "‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã\n"
                "‚Ä¢ –¢–∞–±—É –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
            )
            context.user_data['waiting_for'] = 'preferences'
            return PREFERENCES

        elif context.user_data.get('waiting_for') == 'preferences':
            context.user_data['preferences'] = text
            keyboard = create_style_keyboard()
            update.message.reply_text(
                "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤:",
                reply_markup=keyboard
            )
            return STYLE

        elif context.user_data.get('waiting_for') == 'custom_style':
            context.user_data['style'] = text
            update.message.reply_text(
                "üé≠ –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É –∞—É–¥–∏—Ç–æ—Ä–∏–∏?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –î–æ–≤–µ—Ä–∏–µ\n"
                "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å\n"
                "‚Ä¢ –ñ–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
            )
            context.user_data['waiting_for'] = 'emotions'
            return EMOTIONS

        elif context.user_data.get('waiting_for') == 'emotions':
            context.user_data['emotions'] = text
            update.message.reply_text(
                "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è.\n\n"
                "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä\n"
                "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤\n\n"
                "–ü—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä:"
            )
            context.user_data['waiting_for'] = 'examples'
            context.user_data['examples'] = []
            return EXAMPLES

        elif context.user_data.get('waiting_for') == 'post_number':
            try:
                post_number = int(text)
                if 1 <= post_number <= 14:
                    update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —á–∏—Å–ª–æ {post_number}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
                    user_data = get_user_data(update.effective_chat.id)

                    if not user_data or 'content_plan' not in user_data:
                        update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                        )
                        return ConversationHandler.END

                    generated_post = generate_post(user_data, post_number)
                    update.message.reply_text(
                        f"‚ú® –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à –ø–æ—Å—Ç #{post_number}:\n\n{generated_post}\n\n"
                        "–ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä (1-14):",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", 
                                               callback_data='new_plan')
                        ]])
                    )
                    return POST_NUMBER
                else:
                    update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 14.")
                    return POST_NUMBER
            except ValueError:
                update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 14)."
                )
                return POST_NUMBER

    except Exception as e:
        logger.error(f"Error in text_handler: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

def process_examples(update: Update, context: CallbackContext) -> int:
    """Process collected examples and generate content plan."""
    try:
        logger.info("============ PROCESSING EXAMPLES ============")
        logger.info(f"User data: {context.user_data}")
        logger.info("===========================================")

        # Show processing message
        update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ 14 –¥–Ω–µ–π...")

        # Generate and save content plan
        content_plan = generate_content_plan(context.user_data)
        context.user_data['content_plan'] = content_plan
        save_user_data(update.effective_chat.id, context.user_data)

        # Format and display content plan
        formatted_plan = "üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ 14 –¥–Ω–µ–π:\n\n"
        formatted_plan += content_plan

        # Split long message if needed
        if len(formatted_plan) > 4000:
            # Send plan in parts
            parts = [formatted_plan[i:i+4000] for i in range(0, len(formatted_plan), 4000)]
            for part in parts:
                update.message.reply_text(part)
        else:
            update.message.reply_text(formatted_plan)

        # Show options for post generation
        update.message.reply_text(
            "‚úçÔ∏è –ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, "
            "–≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä (–æ—Ç 1 –¥–æ 14):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", 
                                    callback_data='new_plan')
            ]])
        )

        # Set state for post number input
        context.user_data['waiting_for'] = 'post_number'
        save_user_data(update.effective_chat.id, context.user_data)
        return POST_NUMBER

    except Exception as e:
        logger.error(f"Error generating content plan: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel and end the conversation."""
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    return ConversationHandler.END