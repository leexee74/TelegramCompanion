import os
import logging
from openai import OpenAI
from typing import Dict, Any

logger = logging.getLogger(__name__)

# Initialize OpenAI client
# the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
# do not change this unless explicitly requested by the user
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def generate_product_repackaging(data: Dict[str, str]) -> str:
    """Generate product repackaging content using GPT-4."""
    try:
        logger.info("Generating product repackaging content...")
        logger.debug(f"Input data: {data}")

        prompt = f"""
        –°–æ–∑–¥–∞–π –ø–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

        –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {data.get('audience', '')}
        –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç/–ø—Ä–æ–¥—É–∫—Ç: {data.get('tool', '')}
        –ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('result', '')}

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞:
        1. –°–ù–ê–ß–ê–õ–ê —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤–∏–¥–µ —è—Ä–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
        2. –ó–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏:

        ### –û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        [–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É]

        ### –ö–∞–∫ –ø—Ä–æ–¥—É–∫—Ç —Ä–µ—à–∞–µ—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É
        [–û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ]

        ### –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        [–ü–æ–¥—á–µ—Ä–∫–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞]

        ### –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        [–û–ø–∏—à–∏ –∏–∑–º–µ—Ä–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]

        ### –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        [–î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø—Ä–∏–∑—ã–≤]

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é:
        - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        - –° —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        - –£–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
        - –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —ç–º–æ–¥–∑–∏
        """

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        content = response.choices[0].message.content.strip()
        logger.info("Successfully generated product repackaging content")
        return content

    except Exception as e:
        logger.error(f"Error generating product repackaging: {e}", exc_info=True)
        return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

def generate_content_plan(user_data: Dict[str, Any], user_prefs: Dict[str, str] = None) -> str:
    """Generate a 14-day content plan using GPT-4."""
    try:
        # Combine user input with stored preferences
        if user_prefs:
            user_data['tone_of_voice'] = user_prefs.get('tone_of_voice', user_data.get('style', ''))
            user_data['content_theme'] = user_prefs.get('content_theme', user_data.get('topic', ''))

        prompt = f"""
        –°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ 14 –¥–Ω–µ–π –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞, —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ—Ç–∞–ª–∏:
        - –¢–µ–º–∞ –∫–∞–Ω–∞–ª–∞: {user_data.get('content_theme', user_data.get('topic', ''))}
        - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {user_data.get('audience', '')}
        - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {user_data.get('preferences', '')}
        - –ñ–µ–ª–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {user_data.get('emotions', '')}
        - –°—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è: {user_data.get('tone_of_voice', user_data.get('style', ''))}
        - –ú–µ—Ç–æ–¥ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏: {user_data.get('monetization', '')}
        - –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏/–∫—É—Ä—Å–∞: {user_data.get('product_details', '')}

        –í–ê–ñ–ù–û: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:
        - –î–Ω–∏ 1-5: –†–∞—Å—Å–∫–∞–∑ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ –±–æ–ª—è—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        - –î–Ω–∏ 6-9: –û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        - –î–Ω–∏ 10-11: –í–∞—à —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ–ø—ã—Ç
        - –î–Ω–∏ 12-14: –ú—è–≥–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞

        –°–æ–∑–¥–∞–π –†–û–í–ù–û 14 –ø–æ—Å—Ç–æ–≤, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç 1 –¥–æ 14.
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏:
        1. üî¢ –î–µ–Ω—å #[–Ω–æ–º–µ—Ä]
        2. üéØ –¶–µ–ª—å: [engagement/–ø—Ä–æ–¥–∞–∂–∏/–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ]
        3. üì¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: [–∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]
        4. üìù –û–ø–∏—Å–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏]
        """

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        logger.error(f"Error generating content plan: {e}")
        raise

def generate_post(user_data: Dict[str, Any], post_number: int, 
                 user_prefs: Dict[str, str] = None) -> str:
    """Generate a single post using GPT-4."""
    try:
        # Combine user input with stored preferences
        if user_prefs:
            user_data['tone_of_voice'] = user_prefs.get('tone_of_voice', user_data.get('style', ''))
            user_data['content_theme'] = user_prefs.get('content_theme', user_data.get('topic', ''))

        content_plan = user_data.get('content_plan', '')
        if not content_plan:
            raise ValueError("Content plan not found")

        prompt = f"""
        –°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
        - –¢–µ–º–∞ –∫–∞–Ω–∞–ª–∞: {user_data.get('content_theme', user_data.get('topic', ''))}
        - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {user_data.get('audience', '')}
        - –°—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è: {user_data.get('tone_of_voice', user_data.get('style', ''))}
        - –î–µ–Ω—å #{post_number} –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç—É:
        - –í–æ–≤–ª–µ–∫–∞—é—â–∏–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        - –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏
        - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ø—É –ø—Ä–æ–≥—Ä–µ–≤–∞ (–¥–Ω–∏ 1-5: –ø—Ä–æ–±–ª–µ–º—ã, 6-9: —Ä–µ—à–µ–Ω–∏—è, 
          10-11: —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å, 12-14: –ø—Ä–æ–¥—É–∫—Ç)
        """

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        logger.error(f"Error generating post: {e}")
        raise