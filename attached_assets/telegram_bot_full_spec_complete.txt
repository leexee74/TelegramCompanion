
**TECHNICAL SPECIFICATION FOR UPDATING TELEGRAM BOT ON REPLIT (ENGLISH)**

### **Goal**
Implement new features for the existing Telegram bot on Replit. The bot should:
- Always communicate with users **in Russian**.
- Be **intuitive and user-friendly**.
- Retain the existing content plan functionality **unchanged**.
- Be expanded with product repackaging and message chain tools.
- Optimize usage of ChatGPT.

---

## **1. Optimization of Resource Usage and Data Storage**

### Requirements:
- Use **GPT-4-Turbo** for content generation.
- Save the user's tone of voice, audience, and content theme in SQLite on first input.
- If user data already exists, use the saved data in prompts without re-requesting.
- Add a main menu button **¬´üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª** so users can reset their data and input new preferences.

### Example SQLite table:
```sql
CREATE TABLE IF NOT EXISTS user_data (
  chat_id INTEGER PRIMARY KEY,
  tone_of_voice TEXT,
  audience TEXT,
  content_theme TEXT
);
```

---

## **2. Secondary Bot for Message Chains, Broadcasts, and Stats**

### Features:
- Schedule **a chain of messages** to be sent after a user subscribes to the main bot.
- Send **a one-time broadcast message** to all users within 1 minute.
- Provide **statistics** about total subscribers and broadcast delivery results.

### Message Chain Implementation:
1. Admin opens the second bot.
2. Clicks **¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ø–æ—á–∫—É¬ª**.
3. Inputs:
   - Text of the message
   - Attaches image/video (optional)
   - Sets **when** to send it (X minutes/hours/days after subscription)
4. Clicks **¬´‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª**
5. The bot confirms and offers **¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª**
6. The admin repeats steps 3‚Äì5 to build the full chain.
7. Messages are saved in:
```sql
CREATE TABLE IF NOT EXISTS scheduled_messages (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  step_order INTEGER,
  message_type TEXT,
  content TEXT,
  media_url TEXT,
  delay_minutes INTEGER
);
```
8. The main bot stores `chat_id` and subscription timestamp.
9. The second bot checks who and when should receive the next message.

### Broadcast Messaging:
1. Admin clicks **¬´üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞¬ª**.
2. Inputs message and attaches media (if needed).
3. Confirms.
4. Bot sends message to all users within 1 minute.
5. Bot replies: **¬´–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ [N] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º¬ª**

### Statistics:
- Admin menu includes **¬´üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏¬ª** button.
- Shows:
  - Total number of subscribers
  - Last broadcast stats: **¬´–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ X –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º¬ª**

### Subscriber table:
```sql
CREATE TABLE IF NOT EXISTS subscribers (
  chat_id INTEGER PRIMARY KEY,
  joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## **3. Main Bot Menu (in Russian):**
```
üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã
üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
```

### When user clicks **üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω / –ü–æ—Å—Ç—ã**:
- Launch existing content plan/post generation functionality.
- **Do not change structure or logic.**

---

## **4. New Feature: üéØ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞**

### Input sequence:
1. **¬´–ö—Ç–æ —Ç–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?¬ª**
   Example: ¬´–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –∏ –±–ª–æ–≥–≥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É¬ª
2. **¬´–ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç—ã –¥–∞–µ—à—å?¬ª**
   Example: ¬´–ö–∞–∫ —Å–Ω—è—Ç—å —Ä–∏–ª—Å –Ω–∞ 1 –º–ª–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤¬ª
3. **¬´–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–∏ –ø–æ–ª—É—á–∞—Ç?¬ª**
   Example: ¬´–†–∏–ª—Å —Å 1 –º–ª–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø—Ä–æ–¥–∞–∂–∏¬ª

### ChatGPT Prompt:
```
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
–ê—É–¥–∏—Ç–æ—Ä–∏—è: {–∞—É–¥–∏—Ç–æ—Ä–∏—è}
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç}

–°—Ñ–æ—Ä–º–∏—Ä—É–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–∫–∞–∂–∏:
1. –ö—Ç–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è
2. –ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º—ã –¥–∞—ë–º
3. –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç
4. –°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ü–µ–Ω–Ω–æ—Å—Ç—å), —Ç.–µ. –∫–∞–∫—É—é **–∂–∏–∑–Ω–µ–Ω–Ω—É—é –≤—ã–≥–æ–¥—É** –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

–£—á—Ç–∏ —Ñ–æ—Ä–º—É–ª—É:
–¶–µ–Ω–Ω–æ—Å—Ç—å = (–ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç * –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è) / (–í—Ä–µ–º—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ * –£—Å–∏–ª–∏—è)
–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–Ω–Ω–æ—Å—Ç—å –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π –ø–æ —ç—Ç–æ–π —Ñ–æ—Ä–º—É–ª–µ.

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
- üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è:
- üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:
- üìà –†–µ–∑—É–ª—å—Ç–∞—Ç:
- üöÄ –¶–µ–Ω–Ω–æ—Å—Ç—å (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞):
```

### Output example:
```
üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è:
–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –∏ –±–ª–æ–≥–≥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É

üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:
–ö–∞–∫ —Å–Ω—è—Ç—å —Ä–∏–ª—Å –Ω–∞ 1 –º–ª–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

üìà –†–µ–∑—É–ª—å—Ç–∞—Ç:
–†–∏–ª—Å —Å 1 –º–ª–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–∏–Ω–µ—Å—ë—Ç –ø—Ä–æ–¥–∞–∂–∏

üöÄ –¶–µ–Ω–Ω–æ—Å—Ç—å (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞):
–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–∞–∂ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É, —É—Å–∏–ª–∏–≤–∞–µ—à—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ –∏ –≤—ã—Ö–æ–¥–∏—à—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∏—Ä—É—Å–Ω–æ–º—É –æ—Ö–≤–∞—Ç—É.
```

---

## **5. User Interface**
- Every step must have **¬´üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é¬ª** button.
- Second bot menu must have buttons for:
  - Add message to chain
  - Set message delay
  - Broadcast message
  - View subscriber stats

---

## **Deployment Strategy**
1. Develop all features in `dev` Replit project.
2. Use test Telegram bot.
3. Deploy to production only after full testing.

---



---

## **6. Subscription Check (IMPORTANT)**

The bot must preserve the existing logic that checks whether the user is subscribed to the channel **@expert_buyanov**.

### Requirement:
- The bot **must not allow** access to its functions unless the user is subscribed.
- This check is currently implemented and **must remain active and functional** after updates.
- It should be triggered at the beginning of any interaction or after clicking any menu option.



## **Final Notes**
- Functional expansion is implemented without changing the core logic.
- Chain messaging, broadcast and statistics improve automation and user engagement.
- Product repackaging reflects perceived value using marketing formula.
- The interface is intuitive and designed for non-technical users.

Ready for integration in Replit. If needed, break into `main.py`, `handlers.py`, `db.py`, `admin_bot.py`, `content_bot.py`.
